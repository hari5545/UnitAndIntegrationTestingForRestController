package com.example.demo;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;

import com.userservice.dto.UserDto;
import com.userservice.model.User;
import com.userservice.repository.UserRepository;
import com.userservice.services.UserServices;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = {UserServices.class,UserRepository.class})
public class UserservicesTest {


	@Autowired
	private UserServices userServices;

	@MockBean
	private UserRepository userRepository;


	public void getUserServicesTest() {
		UserDto userDto=new UserDto(1, "sree","hari", "yadav", "skht","hari@gmail.com","hari");
		User user=new User(1, "hari","sree", "yadav", "skht","hari@gmail.com","hari");

		//when(userRepository.findById(1)).thenReturn(userDto);

	}
	@Test
	public void saveUserServicesTest() {
		User user=new User(1, "sree","hari", "yadav", "skht","hari@gmail.com","hari");
		when(userRepository.save(user)).thenReturn(user);
		assertThat(userServices.saveUser(user)).isEqualTo(user);
		verify(userRepository).save(Mockito.any(User.class));
	}
}
